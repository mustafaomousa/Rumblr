[{"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/index.js":"1","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/App.js":"2","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/session.js":"3","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/csrf.js":"4","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/post.js":"5","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/index.js":"6","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/vehicle.js":"7","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/like.js":"8","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/Navigation/index.js":"9","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/DiscoverPage/index.js":"10","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/AboutUsPage/index.js":"11","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/TagPage/index.js":"12","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/ProfilePage/index.js":"13","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/LoginFormPage/index.js":"14","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/WelcomePage/index.js":"15","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/SignupFormPage/index.js":"16","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/SearchResultsPage/index.js":"17","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/CreatePost/index.js":"18","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/AccountModal/index.js":"19","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/PostCard/index.js":"20","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/WelcomePostCard/index.js":"21","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/aws/s3.js":"22","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/NewestPostsComponent/index.js":"23","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/AllPostsComponent/index.js":"24"},{"size":1042,"mtime":1633461221457,"results":"25","hashOfConfig":"26"},{"size":1943,"mtime":1633539314549,"results":"27","hashOfConfig":"26"},{"size":2619,"mtime":1633537308682,"results":"28","hashOfConfig":"26"},{"size":787,"mtime":1629488684526,"results":"29","hashOfConfig":"26"},{"size":3736,"mtime":1629488684527,"results":"30","hashOfConfig":"26"},{"size":855,"mtime":1629488684526,"results":"31","hashOfConfig":"26"},{"size":774,"mtime":1629488684527,"results":"32","hashOfConfig":"26"},{"size":1465,"mtime":1629488684527,"results":"33","hashOfConfig":"26"},{"size":3258,"mtime":1633543942370,"results":"34","hashOfConfig":"26"},{"size":335,"mtime":1633539254558,"results":"35","hashOfConfig":"26"},{"size":1408,"mtime":1629495017614,"results":"36","hashOfConfig":"26"},{"size":1857,"mtime":1629488684525,"results":"37","hashOfConfig":"26"},{"size":4489,"mtime":1629502797284,"results":"38","hashOfConfig":"26"},{"size":2771,"mtime":1633536891547,"results":"39","hashOfConfig":"26"},{"size":863,"mtime":1633543825288,"results":"40","hashOfConfig":"26"},{"size":3103,"mtime":1633537204068,"results":"41","hashOfConfig":"26"},{"size":1597,"mtime":1629488684523,"results":"42","hashOfConfig":"43"},{"size":3804,"mtime":1629508748607,"results":"44","hashOfConfig":"26"},{"size":1287,"mtime":1629488684519,"results":"45","hashOfConfig":"43"},{"size":4347,"mtime":1629511474965,"results":"46","hashOfConfig":"26"},{"size":1811,"mtime":1629502056484,"results":"47","hashOfConfig":"43"},{"size":323,"mtime":1629488684519,"results":"48","hashOfConfig":"26"},{"size":1210,"mtime":1629501505138,"results":"49","hashOfConfig":"26"},{"size":532,"mtime":1629501752663,"results":"50","hashOfConfig":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"17ujxgq",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"53"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"ann2um",{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"53"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"53"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/index.js",[],["108","109"],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/App.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/session.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/csrf.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/post.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/index.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/vehicle.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/store/like.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/Navigation/index.js",["110"],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/DiscoverPage/index.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/AboutUsPage/index.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/TagPage/index.js",["111"],"import { useState } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getRecentTagPosts } from '../../store/post';\n\nimport './tag-page.css';\nimport { useEffect } from \"react\";\nimport PostCard from \"../PostCard\";\n\nconst TagPage = () => {\n    const dispatch = useDispatch();\n    const location = useLocation();\n\n    const [toggle, setToggle] = useState(false);\n\n    const rerumbles = useSelector(state => state.posts.rerumbles);\n    const { tagPosts } = useSelector(state => state.posts);\n    const searchedTag = location.pathname.match(/[^\\/]*$/)[0]\n\n    useEffect(() => {\n        dispatch(getRecentTagPosts(searchedTag));\n    }, [dispatch, searchedTag])\n\n    useEffect(() => window.scrollTo(0, 0), [])\n\n    return rerumbles && (\n        <div className='tag'>\n            <div className='tag-box'>\n                <div className='tag-box-header'>\n                    <div className='tag-box-control'>\n                        <div className='selector recent'>\n                            <h4 onClick={() => setToggle(false)} className={toggle ? '' : 'active'}>Recent</h4>\n                        </div>\n                        <div className='selector top'>\n                            <h4 onClick={() => setToggle(true)} className={toggle ? 'active' : ''}>Top</h4>\n                        </div>\n                    </div>\n                </div>\n                <div className='tag-cards'>\n                    {tagPosts && tagPosts.map((post, idx) => <PostCard key={idx} rerumbles={rerumbles} post={post} />)}\n                </div>\n            </div>\n            <div className='side-box'>\n                <div className='searched-tag-info'>\n                    <h1>' #{searchedTag} '</h1>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default TagPage;","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/ProfilePage/index.js",["112","113"],"import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { Container, Image, Section, Heading } from \"react-bulma-components\";\n\nimport CreatePost from '../CreatePost';\nimport PostCard from '../PostCard';\nimport './profile.css';\n\nconst ProfilePage = () => {\n    const sessionUser = useSelector(state => state.session.user);\n    const allPosts = useSelector(state => state.posts.allPosts);\n    const makes = useSelector(state => state.vehicles.makes);\n    const models = useSelector(state => state.vehicles.models);\n    const { rerumbles } = useSelector(state => state.posts);\n\n    let { username } = useParams();\n\n    const profileUser = useSelector(state => state.session.allUsers.filter((user) => user.username === username))[0];\n    let profileUserId = profileUser.id;\n    const rerumbledPosts = useSelector(state => state.posts.rerumbles.filter(rerumble => rerumble.userId === profileUserId));\n\n    useEffect(() => window.scrollTo(0, 0), [])\n\n    if (!sessionUser) return (\n        <Redirect to='/' />\n    );\n\n    if (profileUser.username === sessionUser.username) return (\n        <div className='ProfilePage'>\n            <Section display=\"flex\">\n                <Container>\n                    <Heading>\n                        <Image size={96} src={profileUser.profilePicture} alt=''/>  \n                    </Heading>\n                    <Heading subtitle>\n                        {sessionUser.username}\n                    </Heading>\n                </Container>\n                <Container>\n                    <Heading>\n                        {profileUser.header}\n                    </Heading>\n                    <Heading subtitle>\n                        {profileUser.bio}\n                    </Heading>\n                </Container>\n            </Section>\n            <Section className=\"columns\">\n                <Section className=\"column\" display=\"flex\" flexDirection=\"column\" justifyItems=\"flex-end\">\n                    <Container>\n                        {allPosts && rerumbles && allPosts.map((post, idx) => {\n                            if (post.userId === sessionUser.id) return (<PostCard post={post} rerumbles={rerumbles} user={sessionUser} key={idx} />)\n                        })}\n                    </Container>\n                </Section>\n                <Section className=\"column\" display=\"flex\" flexDirection=\"column\" justifyItems=\"flex-start\">\n                    <Container style={{width:\"100%\"}}>\n                        <CreatePost user={sessionUser} makes={makes} models={models} />\n                        <div className='rerumbled-container'>\n                            <h2>{username}'s Rerumble's:</h2>\n                            {rerumbledPosts && rerumbledPosts.map((post, idx) => {\n                                return (<PostCard post={post.Post} rerumbles={rerumbles} user={sessionUser} key={idx} />)\n                            })}\n                        </div>\n                    </Container>\n                </Section>\n            </Section>\n        </div>\n\n    )\n\n    if (profileUser) return (\n        <div className='main'>\n            <div className='profile-card'>\n                <div className='profile-user-info'>\n                    <img id='profile-picture' alt='' src={profileUser.profilePicture}></img>\n                    <h1>{profileUser.username}</h1>\n                </div>\n                <div className='bio-header'>\n                    <h4>{profileUser.header}</h4>\n                    <p>{profileUser.bio}</p>\n                </div>\n            </div>\n            <div className='split-cont'>\n                <div className='profile-body'>\n                    {allPosts && allPosts.map((post, idx) => {\n                        if (post.User.username === username) return (<PostCard post={post} rerumbles={rerumbles} user={sessionUser} key={idx} />)\n                    })}\n                </div>\n                <div className='rerumbled'>\n                    <div className='rerumbled-container'>\n                        <h2>{username}'s Rerumble's:</h2>\n                        {rerumbledPosts && rerumbledPosts.map((post, idx) => {\n                            return (<PostCard post={post.Post} rerumbles={rerumbles} user={sessionUser} key={idx} />)\n                        })}\n                    </div>\n                </div>\n            </div>\n\n        </div>\n\n    )\n\n    return <h1>Loading</h1>\n};\n\nexport default ProfilePage;","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/LoginFormPage/index.js",["114","115"],"import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport {\n  Card,\n  CardContent,\n  Button,\n  TextField,\n  CardHeader,\n  Typography,\n  CardActions,\n  Input,\n  Avatar,\n  Alert,\n} from \"@mui/material\";\nimport \"./login.css\";\n\nimport * as sessionActions from \"../../store/session\";\nimport { Box } from \"@mui/system\";\n\nconst LoginFormPage = ({ switchToSignup }) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const sessionUser = useSelector((state) => state.session.user);\n  const [credential, setCredential] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  const updateCredential = (e) => setCredential(e.target.value);\n  const updatePassword = (e) => setPassword(e.target.value);\n\n  if (sessionUser) return <Redirect to=\"/discover\" />;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    setErrors([]);\n\n    dispatch(sessionActions.login(credential, password)).catch((res) => {\n      setErrors(res.data.errors);\n    });\n\n    // return history.push(\"/discover\");\n  };\n\n  const demoLogin = async (e) => {\n    e.preventDefault();\n    setErrors([]);\n    let demoCredential = \"demo-user\";\n    let demoPassword = \"password\";\n    dispatch(sessionActions.login(demoCredential, demoPassword)).catch(\n      (res) => {\n        if (res.data && res.data.errors) setErrors(res.data.errors);\n      }\n    );\n\n    // return history.push(\"/discover\");\n  };\n\n  return (\n    <Card className=\"LoginFormPage\">\n      <CardHeader\n        align=\"center\"\n        title={<Typography sx={{ fontSize: \"20px\" }}>Welcome back!</Typography>}\n        avatar={<Avatar>R</Avatar>}\n      />\n      <CardContent>\n        <form className=\"LoginForm\">\n          <TextField\n            id=\"input\"\n            type=\"text\"\n            onChange={updateCredential}\n            value={credential}\n            label=\"username/email\"\n            required\n          />\n          <br />\n          <TextField\n            id=\"input\"\n            type=\"password\"\n            onChange={updatePassword}\n            value={password}\n            label=\"password\"\n            required\n          />\n        </form>\n        <Box sx={{ paddingTop: \"20px\" }}>\n          {errors &&\n            errors.map((error) => <Alert severity=\"error\">{error}</Alert>)}\n        </Box>\n      </CardContent>\n      <CardActions className=\"LoginFormFooter\">\n        <div>\n          <Button onClick={switchToSignup}>Switch to sign up</Button>\n        </div>\n        <div>\n          <Button onClick={onSubmit}>Log in</Button>\n          <Button onClick={demoLogin}>Demo</Button>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default LoginFormPage;\n","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/WelcomePage/index.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/SignupFormPage/index.js",["116"],"import {\n  Avatar,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  TextField,\n  Typography,\n  Button,\n  Alert,\n} from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Redirect, useHistory } from \"react-router-dom\";\n\nimport * as sessionActions from \"../../store/session\";\n\nimport \"./signup.css\";\n\nconst SignupFormPage = ({ switchToLogin }) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [errors, setErrors] = useState([]);\n\n  const updateUsername = (e) => setUsername(e.target.value);\n  const updateEmail = (e) => setEmail(e.target.value);\n  const updatedPassword = (e) => setPassword(e.target.value);\n  const updatedConfirmPassword = (e) => setConfirmPassword(e.target.value);\n\n  const sessionUser = useSelector((state) => state.session.user);\n  if (sessionUser) return <Redirect to=\"/discover\" />;\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (password === confirmPassword) {\n      setErrors([]);\n\n      const payload = {\n        email,\n        username,\n        password,\n      };\n\n      dispatch(sessionActions.signup(payload)).catch((res) => {\n        console.log(res);\n        setErrors(res.data.errors);\n      });\n    }\n\n    return setErrors([\n      \"Confirm Password field must be the same as the Password\",\n    ]);\n  };\n\n  return (\n    <Card className=\"SignupFormPage\">\n      <CardHeader\n        align=\"center\"\n        title={\n          <Typography sx={{ fontSize: \"20px\" }}>Join the family</Typography>\n        }\n        avatar={<Avatar>R</Avatar>}\n      />\n      <CardContent>\n        <form className=\"SignupForm\">\n          <TextField\n            onChange={updateUsername}\n            value={username}\n            label=\"create a username\"\n            required\n          />\n          <br />\n          <TextField\n            onChange={updateEmail}\n            value={email}\n            label=\"enter email\"\n            required\n          />\n          <br />\n          <TextField\n            type=\"password\"\n            onChange={updatedPassword}\n            label=\"create a password\"\n            required\n          />\n          <br />\n          <TextField\n            type=\"password\"\n            onChange={updatedConfirmPassword}\n            label=\"confirm password\"\n            required\n          />\n        </form>\n        {errors && (\n          <Box sx={{ paddingTop: \"20px\" }}>\n            {errors.map((error) => (\n              <Alert severity=\"error\">{error}</Alert>\n            ))}\n          </Box>\n        )}\n      </CardContent>\n      <CardActions className=\"SignupFormFooter\">\n        <div>\n          <Button onClick={switchToLogin}>Switch to log in</Button>\n        </div>\n        <div>\n          <Button onClick={onSubmit}>Join</Button>\n        </div>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default SignupFormPage;\n","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/SearchResultsPage/index.js",[],["117","118"],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/CreatePost/index.js",["119"],"import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, Form } from \"react-bulma-components\";\n\nimport { createNewPost } from '../../store/post'\nimport UploadPictureS3Client from '../../aws/s3';\n\n\nconst CreatePost = ({ user, makes, models }) => {\n    const dispatch = useDispatch();\n\n    const [title, setTitle] = useState('');\n    const [content, setContent] = useState('');\n    const [body, setBody] = useState('');\n    const [makeId, setMakeId] = useState(0);\n    const [modelId, setModelId] = useState(0);\n    const updateTitle = (e) => setTitle(e.target.value);\n    const updateBody = (e) => setBody(e.target.value);\n    const updateMake = (e) => setMakeId(e.target.value);\n    const updateModel = (e) => setModelId(e.target.value);\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        const tags = body.match(/#[A-Za-z0-9]*/g)\n\n        const payload = {\n            title,\n            content,\n            body,\n            tags,\n            makeId,\n            modelId,\n            userId: user.id\n        };\n        dispatch(createNewPost(payload));\n        resetFields();\n    };\n\n    const uploadFile = (e) => {\n        e.preventDefault();\n\n        UploadPictureS3Client.uploadFile(e.target.files[0], `${user.id}-${new Date()}`)\n            .then(data => setContent(data.location))\n    };\n\n    const resetFields = () => {\n        setTitle('');\n        setContent('');\n        setBody('');\n        setMakeId(0);\n        setModelId(0);\n    };\n\n    return (\n        <div className='CreatePost SpeechBubble'>\n                <form onSubmit={onSubmit}>\n                    <Form.Field>\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control>\n                            <Form.Input onChange={updateTitle} value={title}/>\n                        </Form.Control>\n                    </Form.Field>\n                    <Form.Field>\n                        <Form.Label>Body</Form.Label>\n                        <Form.Control>\n                            <Form.Textarea onChange={updateBody} value={body}/>\n                        </Form.Control>\n                    </Form.Field>\n                    <Form.Field>\n                        <Form.Label>Image</Form.Label>\n                        <Form.Control>\n                            <Form.InputFile type='file' onChange={uploadFile}/>\n                        </Form.Control>\n                    </Form.Field>\n                    <Form.Field>\n                        <Form.Label>Make and Model</Form.Label>\n                        <Form.Control>\n                            <Form.Select onChange={updateMake} value={makeId}>\n                                <option value={0}>Select a Make</option>\n                                        {makes && makes.map((make, idx) => {\n                                            return (\n                                                <option value={make.id} key={idx}>{make.name}</option>\n                                            )\n                                        })}\n                            </Form.Select>\n                            <Form.Select >\n                                <option value={0}>Select a Model</option>\n                                        {models && models.map((model, idx) => {\n                                            return (\n                                                <option value={model.id} key={idx}>{model.name}</option>\n                                            )\n                                        })}\n                            </Form.Select>\n                        </Form.Control>\n                    </Form.Field>\n                    <Button type='submit'>Create Post</Button>\n                </form>\n        </div>\n    )\n};\n\nexport default CreatePost;","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/AccountModal/index.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/PostCard/index.js",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"import { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Card, Media, Image, Heading, Content, Tag, Container } from \"react-bulma-components\";\n\nimport { createNewLike, deleteLike } from '../../store/like';\nimport { createRerumble, deletePost, removeRerumble, updatePost } from '../../store/post';\n\nconst PostCard = ({ post, rerumbles }) => {\n    const dispatch = useDispatch();\n    const [liked, setLiked] = useState(false);\n    const [pictureIsOpen, setPictureIsOpen] = useState(false);\n    const [toolsOpen, setToolsOpen] = useState(false);\n    const sessionUser = useSelector(state => state.session.user);\n    const postLikes = useSelector(state => state.likes.likes.filter(like => like.postId === post.id));\n    const userLikes = useSelector(state => state.likes.likes.filter(like => like.userId === sessionUser.id && like.postId === post.id));\n    const rerumble = rerumbles.filter(rerumble => rerumble.userId === sessionUser.id && rerumble.postId === post.id)[0];\n\n\n\n\n    let like = null;\n    if (userLikes.shift !== undefined) {\n        like = userLikes.shift()\n    };\n\n\n    const likePost = (e) => {\n        e.preventDefault();\n        setLiked(true);\n        const userId = sessionUser.id;\n        const postId = post.id;\n        const payload = { userId, postId };\n\n        dispatch(createNewLike(payload));\n    };\n\n    let listOfTags = [];\n    if (post.Tags) {\n        for (let i = 0; i < post.Tags.length; i++) {\n            listOfTags.push(post.Tags[i].name)\n        }\n    }\n\n    const openSelectedPicture = (e) => {\n        e.preventDefault();\n        setPictureIsOpen(true);\n    };\n\n\n    const removeLike = (e) => {\n        e.preventDefault();\n\n        const userId = sessionUser.id;\n        const postId = post.id;\n        const payload = { userId, postId };\n\n        dispatch(deleteLike(payload));\n        setLiked(false);\n    };\n\n    const addRerumble = (e) => {\n        e.preventDefault();\n\n        const userId = sessionUser.id;\n        const postId = post.id;\n        const payload = { userId, postId };\n\n        dispatch(createRerumble(payload));\n    };\n\n    const deleteRerumble = (e) => {\n        e.preventDefault();\n\n        const userId = sessionUser.id;\n        const postId = post.id;\n        const payload = { userId, postId }\n\n        dispatch(removeRerumble(payload))\n    };\n\n    const [updateOpen, setUpdateOpen] = useState(false);\n    const [title, setTitle] = useState(post.title);\n    const [body, setBody] = useState(post.body);\n\n    const onUpdate = (e) => {\n        e.preventDefault();\n\n        const tags = body.match(/#[A-Za-z0-9]*/g)\n\n        const payload = {\n            tags,\n            postId: post.id,\n            title,\n            body,\n        };\n        dispatch(updatePost(payload));\n        setUpdateOpen(false);\n    };\n\n    useEffect(() => {\n        if (like) setLiked(true);\n    }, [like])\n\n  return (\n      <Card>\n            <Card.Image size=\"4by3\" src={post.content} />\n            <Card.Content>\n                <Media>\n                    <Media.Item renderAs=\"figure\" align=\"left\">\n                        <Image size={64} src={post.User.profilePicture} alt=\"64x64\" />\n                    </Media.Item>\n                    <Media.Item>\n                        <Heading size={4}>{post.User.username}</Heading>\n                    </Media.Item>\n                </Media>\n                <Content>{post.body}</Content>\n                <div display=\"grid\" style={{display:\"grid\", gap:\"1px\", gridAutoFlow:\"column\"}}>\n                        <Tag.Group hasAddons paddingless marginless>\n                            <Tag onClick={likePost}>\n                                Like\n                            </Tag>\n                            <Tag>\n                                {userLikes.length}\n                            </Tag>\n                        </Tag.Group>\n                        <Tag.Group hasAddons paddingless marginless>\n                            <Tag onClick={addRerumble}>\n                                Rerumble\n                            </Tag>\n                            <Tag>\n                                {rerumbles.length}\n                            </Tag>\n                        </Tag.Group>    \n                    </div>\n            </Card.Content>\n      </Card>\n      \n  )\n\n};\n\nexport default PostCard;","/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/WelcomePostCard/index.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/aws/s3.js",[],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/NewestPostsComponent/index.js",[],["135","136"],"/Users/mustafamousa/Desktop/job_search/demo_apps/Rumblr/frontend/src/components/AllPostsComponent/index.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":6,"column":3,"nodeType":"143","messageId":"144","endLine":6,"endColumn":12},{"ruleId":"145","severity":1,"message":"146","line":18,"column":52,"nodeType":"147","messageId":"148","endLine":18,"endColumn":53,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":52,"column":76,"nodeType":"152","messageId":"153","endLine":52,"endColumn":78},{"ruleId":"150","severity":1,"message":"151","line":87,"column":59,"nodeType":"152","messageId":"153","endLine":87,"endColumn":61},{"ruleId":"141","severity":1,"message":"154","line":12,"column":3,"nodeType":"143","messageId":"144","endLine":12,"endColumn":8},{"ruleId":"141","severity":1,"message":"155","line":22,"column":9,"nodeType":"143","messageId":"144","endLine":22,"endColumn":16},{"ruleId":"141","severity":1,"message":"155","line":22,"column":9,"nodeType":"143","messageId":"144","endLine":22,"endColumn":16},{"ruleId":"137","replacedBy":"156"},{"ruleId":"139","replacedBy":"157"},{"ruleId":"141","severity":1,"message":"158","line":20,"column":11,"nodeType":"143","messageId":"144","endLine":20,"endColumn":22},{"ruleId":"141","severity":1,"message":"142","line":3,"column":53,"nodeType":"143","messageId":"144","endLine":3,"endColumn":62},{"ruleId":"141","severity":1,"message":"159","line":6,"column":26,"nodeType":"143","messageId":"144","endLine":6,"endColumn":36},{"ruleId":"141","severity":1,"message":"160","line":10,"column":12,"nodeType":"143","messageId":"144","endLine":10,"endColumn":17},{"ruleId":"141","severity":1,"message":"161","line":11,"column":12,"nodeType":"143","messageId":"144","endLine":11,"endColumn":25},{"ruleId":"141","severity":1,"message":"162","line":12,"column":12,"nodeType":"143","messageId":"144","endLine":12,"endColumn":21},{"ruleId":"141","severity":1,"message":"163","line":12,"column":23,"nodeType":"143","messageId":"144","endLine":12,"endColumn":35},{"ruleId":"141","severity":1,"message":"164","line":14,"column":11,"nodeType":"143","messageId":"144","endLine":14,"endColumn":20},{"ruleId":"141","severity":1,"message":"165","line":16,"column":11,"nodeType":"143","messageId":"144","endLine":16,"endColumn":19},{"ruleId":"141","severity":1,"message":"166","line":44,"column":11,"nodeType":"143","messageId":"144","endLine":44,"endColumn":30},{"ruleId":"141","severity":1,"message":"167","line":50,"column":11,"nodeType":"143","messageId":"144","endLine":50,"endColumn":21},{"ruleId":"141","severity":1,"message":"168","line":71,"column":11,"nodeType":"143","messageId":"144","endLine":71,"endColumn":25},{"ruleId":"141","severity":1,"message":"169","line":81,"column":12,"nodeType":"143","messageId":"144","endLine":81,"endColumn":22},{"ruleId":"141","severity":1,"message":"170","line":82,"column":19,"nodeType":"143","messageId":"144","endLine":82,"endColumn":27},{"ruleId":"141","severity":1,"message":"171","line":83,"column":18,"nodeType":"143","messageId":"144","endLine":83,"endColumn":25},{"ruleId":"141","severity":1,"message":"172","line":85,"column":11,"nodeType":"143","messageId":"144","endLine":85,"endColumn":19},{"ruleId":"137","replacedBy":"173"},{"ruleId":"139","replacedBy":"174"},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["177","178"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Input' is defined but never used.","'history' is assigned a value but never used.",["175"],["176"],"'updateModel' is assigned a value but never used.","'deletePost' is defined but never used.","'liked' is assigned a value but never used.","'pictureIsOpen' is assigned a value but never used.","'toolsOpen' is assigned a value but never used.","'setToolsOpen' is assigned a value but never used.","'postLikes' is assigned a value but never used.","'rerumble' is assigned a value but never used.","'openSelectedPicture' is assigned a value but never used.","'removeLike' is assigned a value but never used.","'deleteRerumble' is assigned a value but never used.","'updateOpen' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'setBody' is assigned a value but never used.","'onUpdate' is assigned a value but never used.",["175"],["176"],"no-global-assign","no-unsafe-negation",{"messageId":"179","fix":"180","desc":"181"},{"messageId":"182","fix":"183","desc":"184"},"removeEscape",{"range":"185","text":"186"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"187","text":"188"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[615,616],"",[615,615],"\\"]